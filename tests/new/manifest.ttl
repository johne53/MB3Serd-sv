# Turtle atomic test manifest

@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix mf: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix rdft:   <http://www.w3.org/ns/rdftest#> .

<>  rdf:type mf:Manifest ;
    rdfs:comment "Atomic Turtle tests" ;
    mf:entries
    (
    <#IRI_subject>
    <#IRI_with_four_digit_numeric_escape>
    <#IRI_with_eight_digit_numeric_escape>
    <#IRI_with_all_punctuation>
    <#bareword_a_predicate>
    <#old_style_prefix>
    <#SPARQL_style_prefix>
    <#prefixed_IRI_predicate>
    <#prefixed_IRI_object>
    <#prefix_only_IRI>
    <#default_namespace_IRI>
    <#prefix_reassigned_and_used>
    <#reserved_escaped_local_name>
    <#percent_escaped_local_name>
    <#HYPHEN_MINUS_in_local_name>
    <#underscore_in_local_name>
    <#localname_with_COLON>
    <#old_style_base>
    <#SPARQL_style_base>
    <#labeled_blank_node_subject>
    <#labeled_blank_node_object>
    <#anonymous_blank_node_subject>
    <#anonymous_blank_node_object>
    <#sole_blankNodePropertyList>
    <#blankNodePropertyList_as_subject>
    <#blankNodePropertyList_as_object>
    <#blankNodePropertyList_with_multiple_triples>
    <#nested_blankNodePropertyLists>
    <#blankNodePropertyList_containing_collection>
    <#collection_subject>
    <#collection_object>
    <#empty_collection>
    <#nested_collection>
    <#first>
    <#last>
    <#LITERAL1>
    <#LITERAL_LONG1>
    <#LITERAL_LONG1_with_1_squote>
    <#LITERAL_LONG1_with_2_squotes>
    <#LITERAL2>
    <#LITERAL_LONG2>
    <#LITERAL_LONG2_with_1_squote>
    <#LITERAL_LONG2_with_2_squotes>
    <#literal_with_CHARACTER_TABULATION>
    <#literal_with_BACKSPACE>
    <#literal_with_LINE_FEED>
    <#literal_with_CARRIAGE_RETURN>
    <#literal_with_FORM_FEED>
    <#literal_with_REVERSE_SOLIDUS>
    <#literal_with_escaped_CHARACTER_TABULATION>
    <#literal_with_escaped_BACKSPACE>
    <#literal_with_escaped_LINE_FEED>
    <#literal_with_escaped_CARRIAGE_RETURN>
    <#literal_with_escaped_FORM_FEED>
    <#literal_with_numeric_escape4>
    <#literal_with_numeric_escape8>
    <#IRIREF_datatype>
    <#prefixed_name_datatype>
    <#bareword_integer>
    <#bareword_decimal>
    <#bareword_double>
    <#double_lower_case_e>
    <#negative_numeric>
    <#positive_numeric>
    <#numeric_with_leading_0>
    <#literal_true>
    <#literal_false>
    <#langtagged_non_LONG>
    <#langtagged_LONG>
    <#lantag_with_subtag>
    <#objectList_with_two_objects>
    <#predicateObjectList_with_two_objectLists>
    <#repeated_semis_at_end>
    <#repeated_semis_not_at_end>
    ) .

<#IRI_subject> rdf:type rdft:TestTurtleEval ;
   mf:name    "IRI_subject" ;
   rdfs:comment "IRI subject" ;
   mf:action    <IRI_subject.ttl> ;
   mf:result    <IRI_subject.nt> ;
   .

<#IRI_with_four_digit_numeric_escape> rdf:type rdft:TestTurtleEval ;
   mf:name    "IRI_with_four_digit_numeric_escape" ;
   rdfs:comment "IRI with four digit numeric escape (\\u)" ;
   mf:action    <IRI_with_four_digit_numeric_escape.ttl> ;
   mf:result    <IRI_subject.nt> ;
   .

<#IRI_with_eight_digit_numeric_escape> rdf:type rdft:TestTurtleEval ;
   mf:name    "IRI_with_eight_digit_numeric_escape" ;
   rdfs:comment "IRI with eight digit numeric escape (\\U)" ;
   mf:action    <IRI_with_eight_digit_numeric_escape.ttl> ;
   mf:result    <IRI_subject.nt> ;
   .

<#IRI_with_all_punctuation> rdf:type rdft:TestTurtleEval ;
   mf:name    "IRI_with_all_punctuation" ;
   rdfs:comment "IRI with all punctuation" ;
   mf:action    <IRI_with_all_punctuation.ttl> ;
   mf:result    <IRI_with_all_punctuation.nt> ;
   .

<#bareword_a_predicate> rdf:type rdft:TestTurtleEval ;
   mf:name    "bareword_a_predicate" ;
   rdfs:comment "bareword a predicate" ;
   mf:action    <bareword_a_predicate.ttl> ;
   mf:result    <bareword_a_predicate.nt> ;
   .

<#old_style_prefix> rdf:type rdft:TestTurtleEval ;
   mf:name    "old_style_prefix" ;
   rdfs:comment "old-style prefix" ;
   mf:action    <old_style_prefix.ttl> ;
   mf:result    <IRI_subject.nt> ;
   .

<#SPARQL_style_prefix> rdf:type rdft:TestTurtleEval ;
   mf:name    "SPARQL_style_prefix" ;
   rdfs:comment "SPARQL-style prefix" ;
   mf:action    <SPARQL_style_prefix.ttl> ;
   mf:result    <IRI_subject.nt> ;
   .

<#prefixed_IRI_predicate> rdf:type rdft:TestTurtleEval ;
   mf:name    "prefixed_IRI_predicate" ;
   rdfs:comment "prefixed IRI predicate" ;
   mf:action    <prefixed_IRI_predicate.ttl> ;
   mf:result    <IRI_subject.nt> ;
   .

<#prefixed_IRI_object> rdf:type rdft:TestTurtleEval ;
   mf:name    "prefixed_IRI_object" ;
   rdfs:comment "prefixed IRI object" ;
   mf:action    <prefixed_IRI_object.ttl> ;
   mf:result    <IRI_subject.nt> ;
   .

<#prefix_only_IRI> rdf:type rdft:TestTurtleEval ;
   mf:name    "prefix_only_IRI" ;
   rdfs:comment "prefix-only IRI (p:)" ;
   mf:action    <prefix_only_IRI.ttl> ;
   mf:result    <IRI_subject.nt> ;
   .

<#default_namespace_IRI> rdf:type rdft:TestTurtleEval ;
   mf:name    "default_namespace_IRI" ;
   rdfs:comment "default namespace IRI (:ln)" ;
   mf:action    <default_namespace_IRI.ttl> ;
   mf:result    <IRI_subject.nt> ;
   .

<#prefix_reassigned_and_used> rdf:type rdft:TestTurtleEval ;
   mf:name    "prefix_reassigned_and_used" ;
   rdfs:comment "prefix reassigned and used" ;
   mf:action    <prefix_reassigned_and_used.ttl> ;
   mf:result    <prefix_reassigned_and_used.nt> ;
   .

<#reserved_escaped_local_name> rdf:type rdft:TestTurtleEval ;
   mf:name    "reserved_escaped_local_name" ;
   rdfs:comment "reserved-escaped local name" ;
   mf:action    <reserved_escaped_local_name.ttl> ;
   mf:result    <reserved_escaped_local_name.nt> ;
   .

<#percent_escaped_local_name> rdf:type rdft:TestTurtleEval ;
   mf:name    "percent_escaped_local_name" ;
   rdfs:comment "percent-escaped local name" ;
   mf:action    <percent_escaped_local_name.ttl> ;
   mf:result    <percent_escaped_local_name.nt> ;
   .

<#HYPHEN_MINUS_in_local_name> rdf:type rdft:TestTurtleEval ;
   mf:name    "HYPHEN_MINUS_in_local_name" ;
   rdfs:comment "HYPHEN-MINUS in local name" ;
   mf:action    <HYPHEN_MINUS_in_local_name.ttl> ;
   mf:result    <HYPHEN_MINUS_in_local_name.nt> ;
   .

<#underscore_in_local_name> rdf:type rdft:TestTurtleEval ;
   mf:name    "underscore_in_local_name" ;
   rdfs:comment "underscore in local name" ;
   mf:action    <underscore_in_local_name.ttl> ;
   mf:result    <underscore_in_local_name.nt> ;
   .

<#localname_with_COLON> rdf:type rdft:TestTurtleEval ;
   mf:name    "localname_with_COLON" ;
   rdfs:comment "localname with COLON" ;
   mf:action    <localname_with_COLON.ttl> ;
   mf:result    <localname_with_COLON.nt> ;
   .

<#old_style_base> rdf:type rdft:TestTurtleEval ;
   mf:name    "old_style_base" ;
   rdfs:comment "old-style base" ;
   mf:action    <old_style_base.ttl> ;
   mf:result    <IRI_subject.nt> ;
   .

<#SPARQL_style_base> rdf:type rdft:TestTurtleEval ;
   mf:name    "SPARQL_style_base" ;
   rdfs:comment "SPARQL-style base" ;
   mf:action    <SPARQL_style_base.ttl> ;
   mf:result    <IRI_subject.nt> ;
   .

<#labeled_blank_node_subject> rdf:type rdft:TestTurtleEval ;
   mf:name    "labeled_blank_node_subject" ;
   rdfs:comment "labeled blank node subject" ;
   mf:action    <labeled_blank_node_subject.ttl> ;
   mf:result    <labeled_blank_node_subject.nt> ;
   .

<#labeled_blank_node_object> rdf:type rdft:TestTurtleEval ;
   mf:name    "labeled_blank_node_object" ;
   rdfs:comment "labeled blank node object" ;
   mf:action    <labeled_blank_node_object.ttl> ;
   mf:result    <labeled_blank_node_object.nt> ;
   .

<#anonymous_blank_node_subject> rdf:type rdft:TestTurtleEval ;
   mf:name    "anonymous_blank_node_subject" ;
   rdfs:comment "anonymous blank node subject" ;
   mf:action    <anonymous_blank_node_subject.ttl> ;
   mf:result    <anonymous_blank_node_subject.nt> ;
   .

<#anonymous_blank_node_object> rdf:type rdft:TestTurtleEval ;
   mf:name    "anonymous_blank_node_object" ;
   rdfs:comment "anonymous blank node object" ;
   mf:action    <anonymous_blank_node_object.ttl> ;
   mf:result    <anonymous_blank_node_object.nt> ;
   .

<#sole_blankNodePropertyList> rdf:type rdft:TestTurtleEval ;
   mf:name    "sole_blankNodePropertyList" ;
   rdfs:comment "sole blankNodePropertyList [ <p> <o> ] ." ;
   mf:action    <sole_blankNodePropertyList.ttl> ;
   mf:result    <sole_blankNodePropertyList.nt> ;
   .

<#blankNodePropertyList_as_subject> rdf:type rdft:TestTurtleEval ;
   mf:name    "blankNodePropertyList_as_subject" ;
   rdfs:comment "blankNodePropertyList as subject [ … ] <p> <o> ." ;
   mf:action    <blankNodePropertyList_as_subject.ttl> ;
   mf:result    <blankNodePropertyList_as_subject.nt> ;
   .

<#blankNodePropertyList_as_object> rdf:type rdft:TestTurtleEval ;
   mf:name    "blankNodePropertyList_as_object" ;
   rdfs:comment "blankNodePropertyList as object <s> <p> [ … ] ." ;
   mf:action    <blankNodePropertyList_as_object.ttl> ;
   mf:result    <blankNodePropertyList_as_object.nt> ;
   .

<#blankNodePropertyList_with_multiple_triples> rdf:type rdft:TestTurtleEval ;
   mf:name    "blankNodePropertyList_with_multiple_triples" ;
   rdfs:comment "blankNodePropertyList with multiple triples [ <s> <p> ; <s2> <p2> ]" ;
   mf:action    <blankNodePropertyList_with_multiple_triples.ttl> ;
   mf:result    <blankNodePropertyList_with_multiple_triples.nt> ;
   .

<#nested_blankNodePropertyLists> rdf:type rdft:TestTurtleEval ;
   mf:name    "nested_blankNodePropertyLists" ;
   rdfs:comment "nested blankNodePropertyLists [ <p1> [ <p2> <o2> ] ; <p3> <o3> ]" ;
   mf:action    <nested_blankNodePropertyLists.ttl> ;
   mf:result    <nested_blankNodePropertyLists.nt> ;
   .

<#blankNodePropertyList_containing_collection> rdf:type rdft:TestTurtleEval ;
   mf:name    "blankNodePropertyList_containing_collection" ;
   rdfs:comment "blankNodePropertyList containing collection [ <p1> ( … ) ]" ;
   mf:action    <blankNodePropertyList_containing_collection.ttl> ;
   mf:result    <blankNodePropertyList_containing_collection.nt> ;
   .

<#collection_subject> rdf:type rdft:TestTurtleEval ;
   mf:name    "collection_subject" ;
   rdfs:comment "collection subject" ;
   mf:action    <collection_subject.ttl> ;
   mf:result    <collection_subject.nt> ;
   .

<#collection_object> rdf:type rdft:TestTurtleEval ;
   mf:name    "collection_object" ;
   rdfs:comment "collection object" ;
   mf:action    <collection_object.ttl> ;
   mf:result    <collection_object.nt> ;
   .

<#empty_collection> rdf:type rdft:TestTurtleEval ;
   mf:name    "empty_collection" ;
   rdfs:comment "empty collection ()" ;
   mf:action    <empty_collection.ttl> ;
   mf:result    <empty_collection.nt> ;
   .

<#nested_collection> rdf:type rdft:TestTurtleEval ;
   mf:name    "nested_collection" ;
   rdfs:comment "nested collection (())" ;
   mf:action    <nested_collection.ttl> ;
   mf:result    <nested_collection.nt> ;
   .

<#first> rdf:type rdft:TestTurtleEval ;
   mf:name    "first" ;
   rdfs:comment "first, not last, non-empty nested collection" ;
   mf:action    <first.ttl> ;
   mf:result    <first.nt> ;
   .

<#last> rdf:type rdft:TestTurtleEval ;
   mf:name    "last" ;
   rdfs:comment "last, not first, non-empty nested collection" ;
   mf:action    <last.ttl> ;
   mf:result    <last.nt> ;
   .

<#LITERAL1> rdf:type rdft:TestTurtleEval ;
   mf:name    "LITERAL1" ;
   rdfs:comment "LITERAL1 'x'" ;
   mf:action    <LITERAL1.ttl> ;
   mf:result    <LITERAL1.nt> ;
   .

<#LITERAL_LONG1> rdf:type rdft:TestTurtleEval ;
   mf:name    "LITERAL_LONG1" ;
   rdfs:comment "LITERAL_LONG1 '''x'''" ;
   mf:action    <LITERAL_LONG1.ttl> ;
   mf:result    <LITERAL1.nt> ;
   .

<#LITERAL_LONG1_with_1_squote> rdf:type rdft:TestTurtleEval ;
   mf:name    "LITERAL_LONG1_with_1_squote" ;
   rdfs:comment "LITERAL_LONG1 with 1 squote '''a'b'''" ;
   mf:action    <LITERAL_LONG1_with_1_squote.ttl> ;
   mf:result    <LITERAL_LONG1_with_1_squote.nt> ;
   .

<#LITERAL_LONG1_with_2_squotes> rdf:type rdft:TestTurtleEval ;
   mf:name    "LITERAL_LONG1_with_2_squotes" ;
   rdfs:comment "LITERAL_LONG1 with 2 squotes '''a''b'''" ;
   mf:action    <LITERAL_LONG1_with_2_squotes.ttl> ;
   mf:result    <LITERAL_LONG1_with_2_squotes.nt> ;
   .

<#LITERAL2> rdf:type rdft:TestTurtleEval ;
   mf:name    "LITERAL2" ;
   rdfs:comment "LITERAL2 \"x\"" ;
   mf:action    <LITERAL2.ttl> ;
   mf:result    <LITERAL1.nt> ;
   .

<#LITERAL_LONG2> rdf:type rdft:TestTurtleEval ;
   mf:name    "LITERAL_LONG2" ;
   rdfs:comment "LITERAL_LONG2 \"\"\"x\"\"\"" ;
   mf:action    <LITERAL_LONG2.ttl> ;
   mf:result    <LITERAL1.nt> ;
   .

<#LITERAL_LONG2_with_1_squote> rdf:type rdft:TestTurtleEval ;
   mf:name    "LITERAL_LONG2_with_1_squote" ;
   rdfs:comment "LITERAL_LONG2 with 1 squote \"\"\"a\"b\"\"\"" ;
   mf:action    <LITERAL_LONG2_with_1_squote.ttl> ;
   mf:result    <LITERAL_LONG2_with_1_squote.nt> ;
   .

<#LITERAL_LONG2_with_2_squotes> rdf:type rdft:TestTurtleEval ;
   mf:name    "LITERAL_LONG2_with_2_squotes" ;
   rdfs:comment "LITERAL_LONG2 with 2 squotes \"\"\"a\"\"b\"\"\"" ;
   mf:action    <LITERAL_LONG2_with_2_squotes.ttl> ;
   mf:result    <LITERAL_LONG2_with_2_squotes.nt> ;
   .

<#literal_with_CHARACTER_TABULATION> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_CHARACTER_TABULATION" ;
   rdfs:comment "literal with CHARACTER TABULATION" ;
   mf:action    <literal_with_CHARACTER_TABULATION.ttl> ;
   mf:result    <literal_with_CHARACTER_TABULATION.nt> ;
   .

<#literal_with_BACKSPACE> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_BACKSPACE" ;
   rdfs:comment "literal with BACKSPACE" ;
   mf:action    <literal_with_BACKSPACE.ttl> ;
   mf:result    <literal_with_BACKSPACE.nt> ;
   .

<#literal_with_LINE_FEED> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_LINE_FEED" ;
   rdfs:comment "literal with LINE FEED" ;
   mf:action    <literal_with_LINE_FEED.ttl> ;
   mf:result    <literal_with_LINE_FEED.nt> ;
   .

<#literal_with_CARRIAGE_RETURN> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_CARRIAGE_RETURN" ;
   rdfs:comment "literal with CARRIAGE RETURN" ;
   mf:action    <literal_with_CARRIAGE_RETURN.ttl> ;
   mf:result    <literal_with_CARRIAGE_RETURN.nt> ;
   .

<#literal_with_FORM_FEED> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_FORM_FEED" ;
   rdfs:comment "literal with FORM FEED" ;
   mf:action    <literal_with_FORM_FEED.ttl> ;
   mf:result    <literal_with_FORM_FEED.nt> ;
   .

<#literal_with_REVERSE_SOLIDUS> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_REVERSE_SOLIDUS" ;
   rdfs:comment "literal with REVERSE SOLIDUS" ;
   mf:action    <literal_with_REVERSE_SOLIDUS.ttl> ;
   mf:result    <literal_with_REVERSE_SOLIDUS.nt> ;
   .

<#literal_with_escaped_CHARACTER_TABULATION> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_escaped_CHARACTER_TABULATION" ;
   rdfs:comment "literal with escaped CHARACTER TABULATION" ;
   mf:action    <literal_with_escaped_CHARACTER_TABULATION.ttl> ;
   mf:result    <literal_with_CHARACTER_TABULATION.nt> ;
   .

<#literal_with_escaped_BACKSPACE> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_escaped_BACKSPACE" ;
   rdfs:comment "literal with escaped BACKSPACE" ;
   mf:action    <literal_with_escaped_BACKSPACE.ttl> ;
   mf:result    <literal_with_BACKSPACE.nt> ;
   .

<#literal_with_escaped_LINE_FEED> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_escaped_LINE_FEED" ;
   rdfs:comment "literal with escaped LINE FEED" ;
   mf:action    <literal_with_escaped_LINE_FEED.ttl> ;
   mf:result    <literal_with_LINE_FEED.nt> ;
   .

<#literal_with_escaped_CARRIAGE_RETURN> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_escaped_CARRIAGE_RETURN" ;
   rdfs:comment "literal with escaped CARRIAGE RETURN" ;
   mf:action    <literal_with_escaped_CARRIAGE_RETURN.ttl> ;
   mf:result    <literal_with_CARRIAGE_RETURN.nt> ;
   .

<#literal_with_escaped_FORM_FEED> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_escaped_FORM_FEED" ;
   rdfs:comment "literal with escaped FORM FEED" ;
   mf:action    <literal_with_escaped_FORM_FEED.ttl> ;
   mf:result    <literal_with_FORM_FEED.nt> ;
   .

<#literal_with_numeric_escape4> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_numeric_escape4" ;
   rdfs:comment "literal with numeric escape4 \\u" ;
   mf:action    <literal_with_numeric_escape4.ttl> ;
   mf:result    <literal_with_numeric_escape4.nt> ;
   .

<#literal_with_numeric_escape8> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_with_numeric_escape8" ;
   rdfs:comment "literal with numeric escape8 \\U" ;
   mf:action    <literal_with_numeric_escape8.ttl> ;
   mf:result    <literal_with_numeric_escape4.nt> ;
   .

<#IRIREF_datatype> rdf:type rdft:TestTurtleEval ;
   mf:name    "IRIREF_datatype" ;
   rdfs:comment "IRIREF datatype \"\"^^<t>" ;
   mf:action    <IRIREF_datatype.ttl> ;
   mf:result    <IRIREF_datatype.nt> ;
   .

<#prefixed_name_datatype> rdf:type rdft:TestTurtleEval ;
   mf:name    "prefixed_name_datatype" ;
   rdfs:comment "prefixed name datatype \"\"^^p:t" ;
   mf:action    <prefixed_name_datatype.ttl> ;
   mf:result    <IRIREF_datatype.nt> ;
   .

<#bareword_integer> rdf:type rdft:TestTurtleEval ;
   mf:name    "bareword_integer" ;
   rdfs:comment "bareword integer" ;
   mf:action    <bareword_integer.ttl> ;
   mf:result    <IRIREF_datatype.nt> ;
   .

<#bareword_decimal> rdf:type rdft:TestTurtleEval ;
   mf:name    "bareword_decimal" ;
   rdfs:comment "bareword decimal" ;
   mf:action    <bareword_decimal.ttl> ;
   mf:result    <bareword_decimal.nt> ;
   .

<#bareword_double> rdf:type rdft:TestTurtleEval ;
   mf:name    "bareword_double" ;
   rdfs:comment "bareword double" ;
   mf:action    <bareword_double.ttl> ;
   mf:result    <bareword_double.nt> ;
   .

<#double_lower_case_e> rdf:type rdft:TestTurtleEval ;
   mf:name    "double_lower_case_e" ;
   rdfs:comment "double lower case e" ;
   mf:action    <double_lower_case_e.ttl> ;
   mf:result    <double_lower_case_e.nt> ;
   .

<#negative_numeric> rdf:type rdft:TestTurtleEval ;
   mf:name    "negative_numeric" ;
   rdfs:comment "negative numeric" ;
   mf:action    <negative_numeric.ttl> ;
   mf:result    <negative_numeric.nt> ;
   .

<#positive_numeric> rdf:type rdft:TestTurtleEval ;
   mf:name    "positive_numeric" ;
   rdfs:comment "positive numeric" ;
   mf:action    <positive_numeric.ttl> ;
   mf:result    <positive_numeric.nt> ;
   .

<#numeric_with_leading_0> rdf:type rdft:TestTurtleEval ;
   mf:name    "numeric_with_leading_0" ;
   rdfs:comment "numeric with leading 0" ;
   mf:action    <numeric_with_leading_0.ttl> ;
   mf:result    <numeric_with_leading_0.nt> ;
   .

<#literal_true> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_true" ;
   rdfs:comment "literal true" ;
   mf:action    <literal_true.ttl> ;
   mf:result    <literal_true.nt> ;
   .

<#literal_false> rdf:type rdft:TestTurtleEval ;
   mf:name    "literal_false" ;
   rdfs:comment "literal false" ;
   mf:action    <literal_false.ttl> ;
   mf:result    <literal_false.nt> ;
   .

<#langtagged_non_LONG> rdf:type rdft:TestTurtleEval ;
   mf:name    "langtagged_non_LONG" ;
   rdfs:comment "langtagged non-LONG \"x\"@en" ;
   mf:action    <langtagged_non_LONG.ttl> ;
   mf:result    <langtagged_non_LONG.nt> ;
   .

<#langtagged_LONG> rdf:type rdft:TestTurtleEval ;
   mf:name    "langtagged_LONG" ;
   rdfs:comment "langtagged LONG \"\"\"x\"\"\"@en" ;
   mf:action    <langtagged_LONG.ttl> ;
   mf:result    <langtagged_non_LONG.nt> ;
   .

<#lantag_with_subtag> rdf:type rdft:TestTurtleEval ;
   mf:name    "lantag_with_subtag" ;
   rdfs:comment "lantag with subtag \"x\"@en-us" ;
   mf:action    <lantag_with_subtag.ttl> ;
   mf:result    <lantag_with_subtag.nt> ;
   .

<#objectList_with_two_objects> rdf:type rdft:TestTurtleEval ;
   mf:name    "objectList_with_two_objects" ;
   rdfs:comment "objectList with two objects … <o1>,<o2>" ;
   mf:action    <objectList_with_two_objects.ttl> ;
   mf:result    <objectList_with_two_objects.nt> ;
   .

<#predicateObjectList_with_two_objectLists> rdf:type rdft:TestTurtleEval ;
   mf:name    "predicateObjectList_with_two_objectLists" ;
   rdfs:comment "predicateObjectList with two objectLists … <o1>,<o2>" ;
   mf:action    <predicateObjectList_with_two_objectLists.ttl> ;
   mf:result    <predicateObjectList_with_two_objectLists.nt> ;
   .

<#repeated_semis_at_end> rdf:type rdft:TestTurtleEval ;
   mf:name    "repeated_semis_at_end" ;
   rdfs:comment "repeated semis at end <s> <p> <o> ;; <p2> <o2> ." ;
   mf:action    <repeated_semis_at_end.ttl> ;
   mf:result    <predicateObjectList_with_two_objectLists.nt> ;
   .

<#repeated_semis_not_at_end> rdf:type rdft:TestTurtleEval ;
   mf:name    "repeated_semis_not_at_end" ;
   rdfs:comment "repeated semis not at end <s> <p> <o> ;;." ;
   mf:action    <repeated_semis_not_at_end.ttl> ;
   mf:result    <repeated_semis_not_at_end.nt> ;
   .

